name: Run Behave Tests

on:
  schedule:
    - cron: '0 1 * * *' # Scheduled every day at 01:00 UTC
  workflow_dispatch: # Allows manual run
    inputs:
      environment:
        description: "Select the target environment"
        required: true
        default: uat
        type: choice
        options:
          - dev
          - uat

jobs:
  Integration_test:
    runs-on: ubuntu-latest
    outputs:
      FAIL_RATE: ${{env.FAIL_RATE}}
      FAIL_RATE_INT: ${{env.FAIL_RATE}}
    name: Run Integration Tests
    env:
      TARGET_ENVIRONMENT: ${{ github.event.inputs.environment || 'uat' }}
    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 #v4.2.0
      - name: Setup Python
        uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 #v5.2.0
        with:
          python-version: 3.x
      - name: Set up JDK
        uses: actions/setup-java@b36c23c0d998641eff861008f374ee103c25ac73
        with:
          distribution: zulu
          java-version: 17
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get install -y jq
      - name: 'Load secrets'
        run: echo "$SECRETS" >> ./config/.secrets.yaml
        env:
          SECRETS: ${{ secrets.INTEGRATION_TESTS_SECRETS }}
        id: load_secrets

      - name: 'Run tests with Behave'
        run: |
          echo "Running tests in $TARGET_ENV environment"
          behave --tags=@happy_path_1 --format allure_behave.formatter:AllureFormatter -o allure-results --junit-directory=junit --junit --summary --show-timings -v
        env:
          TARGET_ENV: ${{ env.TARGET_ENVIRONMENT }}
      - name: Load test report history
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 #v4.2.0
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages
      - name: Build test report
        uses: simple-elf/allure-report-action@91e6ff976a8b2303f2551ca36c39ba5256952c08
        if: always()
        continue-on-error: true
        with:
          gh_pages: gh-pages
          allure_results: allure-results
          allure_report: allure-report
          allure_history: allure-history
          subfolder: integration-tests
          keep_reports: 30
      - name: Publish test report
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history
      - name: Clone gh-pages branch into a temporary directory
        if: always()
        continue-on-error: true
        run: |
          git clone --branch gh-pages --depth 1 https://github.com/pagopa/pagopa-platform-integration-test.git temp-gh-pages
          echo "Cloned gh-pages branch into temp-gh-pages directory."
      - name: Find Latest Run Directory
        if: always()
        continue-on-error: true
        id: find_latest_run
        run: |
          latest_dir=$(ls -d gh-pages/integration-tests/*/ | grep -E '/[0-9]+/$' | sort -V | tail -n 1)
          echo "Latest directory: $latest_dir"
          echo "latest_dir=$latest_dir" >> $GITHUB_OUTPUT
      - name: Extract Fail Rate from Allure
        if: always()
        continue-on-error: true
        id: calculate_fail_rate
        run: |
          echo "Debugging: Checking if temp-gh-pages directory exists"
          ls -la temp-gh-pages || echo "Directory 'temp-gh-pages' not found!"

          echo "Debugging: Checking for the latest numeric directory in integration-tests"
          latest_dir=$(ls -d temp-gh-pages/integration-tests/*/ | grep -E '/[0-9]+/$' | sort -V | tail -n 1)
          echo "Latest numeric directory: $latest_dir"

          summary_file="$latest_dir/widgets/summary.json"
          echo "Debugging: Checking if $summary_file exists"
          cat $summary_file || echo "File not found!"

          if [ -f "$summary_file" ]; then
            fail_rate=$(jq '.statistic.failed / .statistic.total * 100' "$summary_file")
            fail_rate_int=$(printf "%.0f" $fail_rate) # Converte in intero
            echo "FAIL_RATE_INT=$fail_rate_int" >> $GITHUB_ENV
            echo "FAIL_RATE=$fail_rate" >> $GITHUB_ENV
            echo "Calculated Fail Rate: $fail_rate_int%"
          else
            echo "Summary file not found or missing data!"
            echo "FAIL_RATE_INT=0" >> $GITHUB_ENV
            echo "FAIL_RATE=N/A" >> $GITHUB_ENV
          fi
        env:
          FAIL_RATE: ${{ env.FAIL_RATE }}
          FAIL_RATE_INT: ${{ env.FAIL_RATE_INT }}
  

  SendSlackNotification:
    needs: Integration_test
    uses: ./.github/workflows/send-notification.yml
    if: ${{ needs.Integration_test.outputs.FAIL_RATE_INT > 80 }}
    with:
      FAIL_RATE: ${{ needs.Integration_test.outputs.FAIL_RATE }}
    secrets: inherit