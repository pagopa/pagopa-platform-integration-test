name: Deploy Integration Reports

on:
  workflow_call:

jobs:
  deploy_site:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: public

      - name: Checkout source branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          path: source

      - name: Download all report artifacts
        run: |
          # Lista delle applicazioni sotto test
          apps=("wisp-tests" "fdr-tests" "aca-tests" "pm-tests")

          for app in "${apps[@]}"; do
            artifact_name="allure-report-${app}"
            echo "Provando a scaricare $artifact_name..."
            gh run download --name "$artifact_name" --dir "$artifact_name" || echo "Artifact $artifact_name non trovato, continuo..."
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create timestamp
        id: vars
        run: echo "timestamp=$(date +'%Y-%m-%d-%Hh%M')" >> $GITHUB_ENV

      - name: Process reports
        run: |
          extract_stats() {
            local report_dir=$1
            local output_json=$2

            if [ -f "$report_dir/widgets/summary.json" ]; then
              passed=$(jq '.statistic.passed' "$report_dir/widgets/summary.json")
              failed=$(jq '.statistic.failed' "$report_dir/widgets/summary.json")
              skipped=$(jq '.statistic.skipped' "$report_dir/widgets/summary.json")

              echo "{\"passed\": $passed, \"failed\": $failed, \"skipped\": $skipped}" > "$output_json"
              echo "Creato $output_json con dati: passed=$passed failed=$failed skipped=$skipped"
            else
              echo "Summary non trovato per $report_dir"
            fi
          }

          cleanup_old_reports() {
            local base_path=$1

            cd "$base_path"
            valid_dirs=$(ls -dt */ | grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}h[0-9]{2}/$' | head -n 30)
            keep_dirs="$valid_dirs last-history/"

            for dir in */; do
              keep=false
              for k in $keep_dirs; do
                if [[ "$dir" == "$k" ]]; then
                  keep=true
                  break
                fi
              done
              if [[ "$keep" == "false" ]]; then
                echo "Elimino cartella vecchia: $dir"
                rm -rf "$dir"
              fi
            done

            cd -
          }

          generate_index_page() {
            local base_path=$1

            mkdir -p "$base_path"
            cp source/templates/history-index-template.html "$base_path/index.html"

            reports_html=""
            for dir in $(ls -dt $base_path/*/ | grep -v '/last-history/' | grep -v '/index.html' | head -n 30); do
              d=$(basename "$dir")
              stats=""
              if [ -f "$dir/stats.json" ]; then
                passed=$(jq '.passed' "$dir/stats.json")
                failed=$(jq '.failed' "$dir/stats.json")
                stats="<p class='mt-2'>✅ Passed: $passed | ❌ Failed: $failed</p>"
              fi

              reports_html+="<div class=\"col-md-4\"><div class=\"card\"><div class=\"card-body text-center\"><h5 class=\"card-title\">$d</h5>$stats<a href=\"./$d/index.html\" class=\"btn btn-primary mt-2'>Visualizza Report</a></div></div></div>"
            done

            sed -i "s|{{ REPORTS }}|$reports_html|" "$base_path/index.html"
          }

          # LISTA APPLICAZIONI
          apps=("wisp-tests" "fdr-tests" "aca-tests" "pm-tests")

          for app in "${apps[@]}"; do
            if [ -d "allure-report-${app}" ]; then
              echo "Processing $app..."
              mkdir -p "public/$app/${{ env.timestamp }}"
              cp -r "allure-report-${app}/." "public/$app/${{ env.timestamp }}/"

              if [ -f "public/$app/${{ env.timestamp }}/widgets/summary.json" ]; then
                extract_stats "public/$app/${{ env.timestamp }}" "public/$app/${{ env.timestamp }}/stats.json"
              fi

              cleanup_old_reports "public/$app"
              generate_index_page "public/$app"
            else
              echo "No report for $app, skipping."
            fi
          done

      - name: Copy Landing Page
        run: |
          cp source/landing-page/index.html public/index.html
          touch public/.nojekyll

      - name: Replace last update date in landing page
        run: |
          sed -i "s/{{LAST_UPDATE_DATE}}/$(date +'%Y-%m-%d')/" public/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: public
